dir.create(dirnam)
## Running the rejection algorithm
abclike.RH.web <- rejection(all.web.info = all.web.info, model = model, model_core_par = model_core_par,
model_prior_par=model_prior_par, input_parameters=input_par, dist_ss = dist_ss)
save(abclike.RH.web, file = paste(c(dirnam,"/",web.to.analyse,".Rdata"), collapse = ''))
## Plotting the real and predicted food web matrix alongwith some food web properties
plot_foodweb(real_foodweb = all.web.info, predicted_foodweb = abclike.RH.web,
dir_path = dirnam, model_core_par = model_core_par, model = model,
desc=desc)
real_foodweb
real_foodweb$web.name
prop_web <- fw_prop(predicted_foodweb, model_core_par, real_foodweb)
real <- real_prop(all.web.info)
prop <- prop_web$prop
best.web <- prop_web$web
prop.0.corr <- prop$prop.0.corr
prop.1.corr <- prop$prop.1.corr
## Plot the real predation matrix
Plot.matrix(real_predmat,title = paste("C",conn.real.web,sep="="))
## Plot the predicted predation matrix
Plot.matrix_uncertainty(best.web, title = paste(c("Predicted predation matrix ",desc), collapse = ''))
dev.off()
## Plotting the structural properties of food web
s1 <- plot_prop(prop$prop_basal, "Proportion basal", real$prop_basal)
s2 <- plot_prop(prop$prop_inter, "Proportion intermediate", real$prop_inter)
s3 <- plot_prop(prop$prop_top, "Proportion top", real$prop_top)
s4 <- plot_prop(prop$prop_herb, "Proportion herbivores", real$prop_herb)
s5 <- plot_prop(prop$mean_trop_lvl, "Mean trophic level", real$mean_trop_lvl)
s6 <- plot_prop(prop$max_trop_lvl, "Max trophic level", real$max_trop_lvl)
s7 <- plot_prop(prop$mean_omn, "Mean omnivory", real$mean_omn)
s8 <- plot_prop(prop$sd_gen, "Standard deviation of generalism", real$sd_gen)
s9 <- plot_prop(prop$sd_vulner, "Standard deviation of vulnerability", real$sd_vulner)
s10 <- plot_prop(prop$diet_sim, "Diet similarity", real$diet_sim)
s11 <- plot_prop(prop$mean_path_lt, "Mean path length", real$mean_path_lt)
figure <- ggarrange(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11, nrow = 6, ncol=2)
name <-  paste(c(dirnam,"/",'properties.pdf'), collapse = '')
annotate_figure(figure, top = desc)
ggsave(filename = name, width=9, height=12)
## Plotting proportion of 'links' correct vs proportion of 'no links' correct
pdf(paste(c(dirnam,'/','1_vs_0.pdf'),collapse = ''),width=6,height=6)
plot(prop.0.corr, prop.1.corr, main = desc, xlab = "Proportion of zeros correct",
ylab = "Proportion of ones correct")
dev.off()
conn.real.web = format(round(sum(real_foodweb$predation.matrix)/dim(real_predmat)[1]^2, 2), nsmall = 2)
pdf(paste(c(dirnam,"/",'matrix.pdf'),collapse = ''),width=18,height=6)
par(mfrow=c(1,3))
library(R.utils)
library(tictoc)
## Loading required libraries
library(ggpubr); library(plotrix); library(ggplot2)
library(cowplot); library(latex2exp); library(HDInterval)
library(doParallel); library(foreach); library(raster)
## Start of computation time
tic("Time elapsed:")
## Relative path from the project directory
sourceDirectory("../ADBM", modifiedOnly=FALSE)
sourceDirectory("../method", modifiedOnly=FALSE)
sourceDirectory("../analysis_tools", modifiedOnly=FALSE)
sourceDirectory("../data", modifiedOnly=FALSE)
source("rejection.R")
web.to.analyse <- "Benguela Pelagic"
foodweb_data <- load(paste("../data/", web.to.analyse, ".web.Rdata", sep=""))
all.web.info <- get(foodweb_data)
model = ratio.power
model_core_par = ADBM_core_par(all.web.info)
model_prior_par = ADBM_prior_par()
input_par = input_parameters()
dist_ss = dist_connectance
desc = "connectance"
## Creating a directory where all the results will be stored
dir_N <- input_par$N
dir_tol <- input_par$tol
ss_type <- as.character(substitute(dist_ss))
dirnam <- paste(c("../results/",web.to.analyse,"/",'N=', dir_N, '_tol=', dir_tol,"_", desc), collapse = '')
dir.create(dirnam)
## Running the rejection algorithm
abclike.RH.web <- rejection(all.web.info = all.web.info, model = model, model_core_par = model_core_par,
model_prior_par=model_prior_par, input_parameters=input_par, dist_ss = dist_ss)
save(abclike.RH.web, file = paste(c(dirnam,"/",web.to.analyse,".Rdata"), collapse = ''))
## Plotting the real and predicted food web matrix alongwith some food web properties
plot_foodweb(real_foodweb = all.web.info, predicted_foodweb = abclike.RH.web,
dir_path = dirnam, model_core_par = model_core_par, model = model,
desc=desc)
library(R.utils)
library(tictoc)
## Loading required libraries
library(ggpubr); library(plotrix); library(ggplot2)
library(cowplot); library(latex2exp); library(HDInterval)
library(doParallel); library(foreach); library(raster)
## Start of computation time
tic("Time elapsed:")
## Relative path from the project directory
sourceDirectory("../ADBM", modifiedOnly=FALSE)
sourceDirectory("../method", modifiedOnly=FALSE)
sourceDirectory("../analysis_tools", modifiedOnly=FALSE)
sourceDirectory("../data", modifiedOnly=FALSE)
source("rejection.R")
web.to.analyse <- "Benguela Pelagic"
foodweb_data <- load(paste("../data/", web.to.analyse, ".web.Rdata", sep=""))
all.web.info <- get(foodweb_data)
model = ratio.power
model_core_par = ADBM_core_par(all.web.info)
model_prior_par = ADBM_prior_par()
input_par = input_parameters()
dist_ss = dist_connectance
desc = "connectance"
## Creating a directory where all the results will be stored
dir_N <- input_par$N
dir_tol <- input_par$tol
ss_type <- as.character(substitute(dist_ss))
dirnam <- paste(c("../results/",web.to.analyse,"/",'N=', dir_N, '_tol=', dir_tol,"_", desc), collapse = '')
dir.create(dirnam)
## Running the rejection algorithm
abclike.RH.web <- rejection(all.web.info = all.web.info, model = model, model_core_par = model_core_par,
model_prior_par=model_prior_par, input_parameters=input_par, dist_ss = dist_ss)
save(abclike.RH.web, file = paste(c(dirnam,"/",web.to.analyse,".Rdata"), collapse = ''))
## Plotting the real and predicted food web matrix alongwith some food web properties
plot_foodweb(real_foodweb = all.web.info, predicted_foodweb = abclike.RH.web,
dirnam = dirnam, model_core_par = model_core_par, model = model,
desc=desc)
library(R.utils)
library(tictoc)
## Loading required libraries
library(ggpubr); library(plotrix); library(ggplot2)
library(cowplot); library(latex2exp); library(HDInterval)
library(doParallel); library(foreach); library(raster)
## Start of computation time
tic("Time elapsed:")
## Relative path from the project directory
sourceDirectory("../ADBM", modifiedOnly=FALSE)
sourceDirectory("../method", modifiedOnly=FALSE)
sourceDirectory("../analysis_tools", modifiedOnly=FALSE)
sourceDirectory("../data", modifiedOnly=FALSE)
source("rejection.R")
web.to.analyse <- "Benguela Pelagic"
foodweb_data <- load(paste("../data/", web.to.analyse, ".web.Rdata", sep=""))
all.web.info <- get(foodweb_data)
model = ratio.power
model_core_par = ADBM_core_par(all.web.info)
model_prior_par = ADBM_prior_par()
input_par = input_parameters()
dist_ss = dist_connectance
desc = "connectance"
## Creating a directory where all the results will be stored
dir_N <- input_par$N
dir_tol <- input_par$tol
ss_type <- as.character(substitute(dist_ss))
dirnam <- paste(c("../results/",web.to.analyse,"/",'N=', dir_N, '_tol=', dir_tol,"_", desc), collapse = '')
dir.create(dirnam)
## Running the rejection algorithm
abclike.RH.web <- rejection(all.web.info = all.web.info, model = model, model_core_par = model_core_par,
model_prior_par=model_prior_par, input_parameters=input_par, dist_ss = dist_ss)
save(abclike.RH.web, file = paste(c(dirnam,"/",web.to.analyse,".Rdata"), collapse = ''))
## Plotting the real and predicted food web matrix alongwith some food web properties
plot_foodweb(real_foodweb = all.web.info, predicted_foodweb = abclike.RH.web,
dirnam = dirnam, model_core_par = model_core_par, model = model,
desc=desc)
library(R.utils)
library(tictoc)
## Loading required libraries
library(ggpubr); library(plotrix); library(ggplot2)
library(cowplot); library(latex2exp); library(HDInterval)
library(doParallel); library(foreach); library(raster)
## Start of computation time
tic("Time elapsed:")
## Relative path from the project directory
sourceDirectory("../ADBM", modifiedOnly=FALSE)
sourceDirectory("../method", modifiedOnly=FALSE)
sourceDirectory("../analysis_tools", modifiedOnly=FALSE)
sourceDirectory("../data", modifiedOnly=FALSE)
source("rejection.R")
web.to.analyse <- "Benguela Pelagic"
foodweb_data <- load(paste("../data/", web.to.analyse, ".web.Rdata", sep=""))
all.web.info <- get(foodweb_data)
model = ratio.power
model_core_par = ADBM_core_par(all.web.info)
model_prior_par = ADBM_prior_par()
input_par = input_parameters()
dist_ss = dist_connectance
desc = "connectance"
## Creating a directory where all the results will be stored
dir_N <- input_par$N
dir_tol <- input_par$tol
ss_type <- as.character(substitute(dist_ss))
dirnam <- paste(c("../results/",web.to.analyse,"/",'N=', dir_N, '_tol=', dir_tol,"_", desc), collapse = '')
dir.create(dirnam)
## Running the rejection algorithm
abclike.RH.web <- rejection(all.web.info = all.web.info, model = model, model_core_par = model_core_par,
model_prior_par=model_prior_par, input_parameters=input_par, dist_ss = dist_ss)
save(abclike.RH.web, file = paste(c(dirnam,"/",web.to.analyse,".Rdata"), collapse = ''))
## Plotting the real and predicted food web matrix alongwith some food web properties
plot_foodweb(real_foodweb = all.web.info, predicted_foodweb = abclike.RH.web,
dirnam = dirnam, model_core_par = model_core_par, model = model,
desc=desc)
plot_prop()
s1 <- plot_prop(prop$prop_basal, "Proportion basal", real$prop_basal)
s2 <- plot_prop(prop$prop_inter, "Proportion intermediate", real$prop_inter)
s3 <- plot_prop(prop$prop_top, "Proportion top", real$prop_top)
s4 <- plot_prop(prop$prop_herb, "Proportion herbivores", real$prop_herb)
s5 <- plot_prop(prop$mean_trop_lvl, "Mean trophic level", real$mean_trop_lvl)
s6 <- plot_prop(prop$max_trop_lvl, "Max trophic level", real$max_trop_lvl)
s7 <- plot_prop(prop$mean_omn, "Mean omnivory", real$mean_omn)
s8 <- plot_prop(prop$sd_gen, "Standard deviation of generalism", real$sd_gen)
s9 <- plot_prop(prop$sd_vulner, "Standard deviation of vulnerability", real$sd_vulner)
s10 <- plot_prop(prop$diet_sim, "Diet similarity", real$diet_sim)
s11 <- plot_prop(prop$mean_path_lt, "Mean path length", real$mean_path_lt)
s1 <- plot_prop(prop$prop_basal, "Proportion basal", real$prop_basal)
s2 <- plot_prop(prop$prop_inter, "Proportion intermediate", real$prop_inter)
s3 <- plot_prop(prop$prop_top, "Proportion top", real$prop_top)
s4 <- plot_prop(prop$prop_herb, "Proportion herbivores", real$prop_herb)
s5 <- plot_prop(prop$mean_trop_lvl, "Mean trophic level", real$mean_trop_lvl)
s6 <- plot_prop(prop$max_trop_lvl, "Max trophic level", real$max_trop_lvl)
s7 <- plot_prop(prop$mean_omn, "Mean omnivory", real$mean_omn)
s8 <- plot_prop(prop$sd_gen, "Standard deviation of generalism", real$sd_gen)
s9 <- plot_prop(prop$sd_vulner, "Standard deviation of vulnerability", real$sd_vulner)
s10 <- plot_prop(prop$diet_sim, "Diet similarity", real$diet_sim)
s11 <- plot_prop(prop$mean_path_lt, "Mean path length", real$mean_path_lt)
library(R.utils)
library(tictoc)
## Loading required libraries
library(ggpubr); library(plotrix); library(ggplot2)
library(cowplot); library(latex2exp); library(HDInterval)
library(doParallel); library(foreach); library(raster)
## Start of computation time
tic("Time elapsed:")
## Relative path from the project directory
sourceDirectory("../ADBM", modifiedOnly=FALSE)
sourceDirectory("../method", modifiedOnly=FALSE)
sourceDirectory("../analysis_tools", modifiedOnly=FALSE)
sourceDirectory("../data", modifiedOnly=FALSE)
source("rejection.R")
web.to.analyse <- "Benguela Pelagic"
foodweb_data <- load(paste("../data/", web.to.analyse, ".web.Rdata", sep=""))
all.web.info <- get(foodweb_data)
model = ratio.power
model_core_par = ADBM_core_par(all.web.info)
model_prior_par = ADBM_prior_par()
input_par = input_parameters()
dist_ss = dist_connectance
desc = "connectance"
## Creating a directory where all the results will be stored
dir_N <- input_par$N
dir_tol <- input_par$tol
ss_type <- as.character(substitute(dist_ss))
dirnam <- paste(c("../results/",web.to.analyse,"/",'N=', dir_N, '_tol=', dir_tol,"_", desc), collapse = '')
dir.create(dirnam)
## Running the rejection algorithm
abclike.RH.web <- rejection(all.web.info = all.web.info, model = model, model_core_par = model_core_par,
model_prior_par=model_prior_par, input_parameters=input_par, dist_ss = dist_ss)
save(abclike.RH.web, file = paste(c(dirnam,"/",web.to.analyse,".Rdata"), collapse = ''))
## Plotting the real and predicted food web matrix alongwith some food web properties
plot_foodweb(real_foodweb = all.web.info, predicted_foodweb = abclike.RH.web,
dirnam = dirnam, model_core_par = model_core_par, model = model,
desc=desc)
plot_prop(prop$prop_basal, "Proportion basal", real$prop_basal)
plot_prop()
plot_prop
library(R.utils)
library(tictoc)
## Loading required libraries
library(ggpubr); library(plotrix); library(ggplot2)
library(cowplot); library(latex2exp); library(HDInterval)
library(doParallel); library(foreach); library(raster)
## Start of computation time
tic("Time elapsed:")
## Relative path from the project directory
sourceDirectory("../ADBM", modifiedOnly=FALSE)
sourceDirectory("../method", modifiedOnly=FALSE)
sourceDirectory("../analysis_tools", modifiedOnly=FALSE)
sourceDirectory("../data", modifiedOnly=FALSE)
source("rejection.R")
web.to.analyse <- "Benguela Pelagic"
foodweb_data <- load(paste("../data/", web.to.analyse, ".web.Rdata", sep=""))
all.web.info <- get(foodweb_data)
model = ratio.power
model_core_par = ADBM_core_par(all.web.info)
model_prior_par = ADBM_prior_par()
input_par = input_parameters()
dist_ss = dist_connectance
desc = "connectance"
## Creating a directory where all the results will be stored
dir_N <- input_par$N
dir_tol <- input_par$tol
ss_type <- as.character(substitute(dist_ss))
dirnam <- paste(c("../results/",web.to.analyse,"/",'N=', dir_N, '_tol=', dir_tol,"_", desc), collapse = '')
dir.create(dirnam)
## Running the rejection algorithm
abclike.RH.web <- rejection(all.web.info = all.web.info, model = model, model_core_par = model_core_par,
model_prior_par=model_prior_par, input_parameters=input_par, dist_ss = dist_ss)
save(abclike.RH.web, file = paste(c(dirnam,"/",web.to.analyse,".Rdata"), collapse = ''))
## Plotting the real and predicted food web matrix alongwith some food web properties
plot_foodweb(real_foodweb = all.web.info, predicted_foodweb = abclike.RH.web,
dirnam = dirnam, model_core_par = model_core_par, model = model,
desc=desc)
library(R.utils)
library(tictoc)
## Start of computation time
tic("Time elapsed:")
## Relative path from the project directory
sourceDirectory("../ADBM")
sourceDirectory("../method")
sourceDirectory("../analysis_tools")
sourceDirectory("../data")
## Loading required libraries
library(ggpubr); library(plotrix); library(ggplot2)
library(cowplot); library(latex2exp); library(HDInterval)
library(doParallel); library(foreach); library(raster)
input_parameters()
asd<- input_parameters()
asd
abclike.RH.web$total_sim
N
library(R.utils)
library(tictoc)
## Loading required libraries
library(ggpubr); library(plotrix); library(ggplot2)
library(cowplot); library(latex2exp); library(HDInterval)
library(doParallel); library(foreach); library(raster)
## Start of computation time
tic("Time elapsed:")
## Relative path from the project directory
sourceDirectory("../ADBM", modifiedOnly=FALSE)
sourceDirectory("../method", modifiedOnly=FALSE)
sourceDirectory("../analysis_tools", modifiedOnly=FALSE)
sourceDirectory("../data", modifiedOnly=FALSE)
source("rejection.R")
web.to.analyse <- "Benguela Pelagic"
foodweb_data <- load(paste("../data/", web.to.analyse, ".web.Rdata", sep=""))
all.web.info <- get(foodweb_data)
model = ratio.power
model_core_par = ADBM_core_par(all.web.info)
model_prior_par = ADBM_prior_par()
input_par = input_parameters()
dist_ss = dist_connectance
desc = "connectance"
## Creating a directory where all the results will be stored
dir_N <- input_par$N
dir_tol <- input_par$tol
ss_type <- as.character(substitute(dist_ss))
dirnam <- paste(c("../results/",web.to.analyse,"/",'N=', dir_N, '_tol=', dir_tol,"_", desc), collapse = '')
dir.create(dirnam)
## Running the rejection algorithm
abclike.RH.web <- rejection(all.web.info = all.web.info, model = model, model_core_par = model_core_par,
model_prior_par=model_prior_par, input_parameters=input_par, dist_ss = dist_ss)
save(abclike.RH.web, file = paste(c(dirnam,"/",web.to.analyse,".Rdata"), collapse = ''))
## Plotting the real and predicted food web matrix alongwith some food web properties
plot_foodweb(real_foodweb = all.web.info, predicted_foodweb = abclike.RH.web,
dirnam = dirnam, model_core_par = model_core_par, model = model,
desc=desc)
toc()
print(paste("Proportion of accepted simulations =", round(dir_N/abc.RH.web$total_sim,3)))
print(paste("Proportion of accepted simulations =", round(dir_N/abclike.RH.web$total_sim,3)))
library(R.utils)
library(tictoc)
## Loading required libraries
library(ggpubr); library(plotrix); library(ggplot2)
library(cowplot); library(latex2exp); library(HDInterval)
library(doParallel); library(foreach); library(raster)
## Start of computation time
tic("Time elapsed:")
## Relative path from the project directory
sourceDirectory("../ADBM", modifiedOnly=FALSE)
sourceDirectory("../method", modifiedOnly=FALSE)
sourceDirectory("../analysis_tools", modifiedOnly=FALSE)
sourceDirectory("../data", modifiedOnly=FALSE)
source("rejection.R")
web.to.analyse <- "Benguela Pelagic"
foodweb_data <- load(paste("../data/", web.to.analyse, ".web.Rdata", sep=""))
all.web.info <- get(foodweb_data)
model = ratio.power
model_core_par = ADBM_core_par(all.web.info)
model_prior_par = ADBM_prior_par()
input_par = input_parameters()
dist_ss = dist_connectance
desc = "connectance"
## Creating a directory where all the results will be stored
dir_N <- input_par$N
dir_tol <- input_par$tol
ss_type <- as.character(substitute(dist_ss))
dirnam <- paste(c("../results/",web.to.analyse,"/",'N=', dir_N, '_tol=', dir_tol,"_", desc), collapse = '')
dir.create(dirnam)
## Running the rejection algorithm
abclike.RH.web <- rejection(all.web.info = all.web.info, model = model, model_core_par = model_core_par,
model_prior_par=model_prior_par, input_parameters=input_par, dist_ss = dist_ss)
save(abclike.RH.web, file = paste(c(dirnam,"/",web.to.analyse,".Rdata"), collapse = ''))
## Plotting the real and predicted food web matrix alongwith some food web properties
plot_foodweb(real_foodweb = all.web.info, predicted_foodweb = abclike.RH.web,
dirnam = dirnam, model_core_par = model_core_par, model = model,
desc=desc)
toc()
print(paste("Proportion of accepted simulations =", round(dir_N/abclike.RH.web$total_sim,3)))
library(R.utils)
library(tictoc)
## Loading required libraries
library(ggpubr); library(plotrix); library(ggplot2)
library(cowplot); library(latex2exp); library(HDInterval)
library(doParallel); library(foreach); library(raster)
## Start of computation time
tic("Time elapsed:")
## Relative path from the project directory
sourceDirectory("../ADBM", modifiedOnly=FALSE)
sourceDirectory("../method", modifiedOnly=FALSE)
sourceDirectory("../analysis_tools", modifiedOnly=FALSE)
sourceDirectory("../data", modifiedOnly=FALSE)
source("rejection.R")
web.to.analyse <- "Benguela Pelagic"
foodweb_data <- load(paste("../data/", web.to.analyse, ".web.Rdata", sep=""))
all.web.info <- get(foodweb_data)
model = ratio.power
model_core_par = ADBM_core_par(all.web.info)
model_prior_par = ADBM_prior_par()
input_par = input_parameters()
dist_ss = dist_connectance
desc = "connectance"
## Creating a directory where all the results will be stored
dir_N <- input_par$N
dir_tol <- input_par$tol
ss_type <- as.character(substitute(dist_ss))
dirnam <- paste(c("../results/",web.to.analyse,"/",'N=', dir_N, '_tol=', dir_tol,"_", desc), collapse = '')
dir.create(dirnam)
## Running the rejection algorithm
abclike.RH.web <- rejection(all.web.info = all.web.info, model = model, model_core_par = model_core_par,
model_prior_par=model_prior_par, input_parameters=input_par, dist_ss = dist_ss)
save(abclike.RH.web, file = paste(c(dirnam,"/",web.to.analyse,".Rdata"), collapse = ''))
## Plotting the real and predicted food web matrix alongwith some food web properties
plot_foodweb(real_foodweb = all.web.info, predicted_foodweb = abclike.RH.web,
dirnam = dirnam, model_core_par = model_core_par, model = model,
desc=desc)
toc()
print(paste("Proportion of accepted simulations =", round(dir_N/abclike.RH.web$total_sim,3)))
org_data <- read.csv("~/Google Drive/GitHub/C2_comp_qnty/data/raw_data/ChileanRiverData_Gilljam_etal_AER_v45ch3.csv", comment.char="#")
bs_data <- org_data %>%
filter(locality == "Coilaco")
n_node <- length(unique(c(bs_data$predID, bs_data$preyID)))
bs_data <- org_data %>%
filter(locality == "Coilaco")
library(dplyr)
bs_data <- org_data %>%
filter(locality == "Coilaco")
unique(union(unique(bs_data$preyID), unique(bs_data$predID)))
bs_data
load("~/Google Drive/GitHub/C2_comp_qnty/data/Coilaco size_agg.web.Rdata")
uniq_ind <- unique(bs_data$predUniqueID)
n_pred_ind <- length(uniq_ind)
#The first row of the diet_mat corresponds to the predator identity denoted by a unique number and second row consists of bin number
diet_mat <- matrix(data = 0, nrow = n_node+2, ncol = n_pred_ind,)
org_data <- read.csv("~/Google Drive/GitHub/C2_comp_qnty/data/raw_data/ChileanRiverData_Gilljam_etal_AER_v45ch3.csv", comment.char="#")
bs_data <- org_data %>%
filter(locality == "Coilaco")
n_node <- length(unique(c(bs_data$predID, bs_data$preyID)))
pred_ind <- c()
max_size <- numeric(1)
min_size <- numeric(1)
min_size <- log10(min(bs_data$preyMass, bs_data$preyMass))
max_size <- log10(max(bs_data$predMass, bs_data$predMass))
h <- (max_size-min_size)/n_node
nbin <- n_node
M <- 10^(min_size + ((0:(nbin-1)+0.5))*h)
mass_to_ind <- function(mass){
index <- ceiling((mass-min_size)/h)
if(index == 0) {index = 1}
return(index)
}
species_name <- as.character(1:nbin)
ndim <- length(species_name)
pred_mat <- matrix(rep(0,ndim*ndim), nrow = ndim, ncol = ndim,
dimnames = list(as.character(1:nbin), as.character(1:nbin)))
for(row_no in 1:nrow(bs_data)){
mt <- bs_data[row_no,]
prey_mass <- log10(bs_data$preyMass[row_no])
pred_mass <- log10(bs_data$predMass[row_no])
predator_node <- mass_to_ind(pred_mass)
prey_node <- mass_to_ind(prey_mass)
pred_mat[prey_node, predator_node] <- 1
}
all.web.info <- list(predation.matrix = pred_mat,
species.sizes = M,
web.name = "Coilaco size_agg")
uniq_ind <- unique(bs_data$predUniqueID)
n_pred_ind <- length(uniq_ind)
#The first row of the diet_mat corresponds to the predator identity denoted by a unique number and second row consists of bin number
diet_mat <- matrix(data = 0, nrow = n_node+2, ncol = n_pred_ind,)
diet_mat[1,] <- c(1:n_pred_ind)
i <- 1
for(row_no in 1:nrow(bs_data)){
mt <- bs_data[row_no,]
pseudo_pred_ind <- which(uniq_ind == bs_data$predUniqueID[row_no])
prey_mass <- log10(mt$preyMass)
prey_name <- mass_to_ind(prey_mass)
pred_mass <- log10(mt$predMass)
pred_name <- mass_to_ind(pred_mass)
pred_ind <- mt$predUniqueID
pseudo_pred_ind <- which(uniq_ind == pred_ind)
diet_mat[prey_name+2, pseudo_pred_ind] <- 1
diet_mat[1, pseudo_pred_ind] <- log10(mt$predMass)
diet_mat[2, pseudo_pred_ind] <- pred_name
}
diet_mat
bs_data <- org_data %>%
filter(locality == "Guampoe")
bs_data
length(bs_data$predUniqueID)
unique(bs_data$predUniqueID)
c(bs_data$predID, bs_data$preyID)
unique(c(bs_data$predID, bs_data$preyID))
bs_data <- org_data %>%
filter(locality == "Coilaco")
n_node <- length(unique(c(bs_data$predID, bs_data$preyID)))
unique(union(unique(bs_data$preyID), unique(bs_data$predID)))
bs_data <- org_data %>%
filter(locality == "Trancura")
unique(union(unique(bs_data$preyID), unique(bs_data$predID)))
